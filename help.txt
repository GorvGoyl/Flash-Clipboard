// How to setup project
- install latest nodejs from official site
- check node and npm --version in cmd
    node: 8.7.0, npm: 5.4.2
- install electron either globally or local to project (my electron version: 1.7.9)
    for globally: npm install electron -g
    for locally (run in vscode terminal after opening project): npm install electron --save-dev --save-exact
- clone repo from github https://github.com/JerryGoyal/MultiCopy-Paste
- open with vscode

// How to build
- run: npm install (it'll give robotjs issues which can be resolved in next step)
- to fix robotjs issues: follow below instructions or see https://stackoverflow.com/questions/11178372/is-it-possible-to-simulate-keyboard-mouse-event-in-nodejs/46897783#46897783
    run: npm install --global windows-build-tools
    run: npm install robotjs --save-dev (for me, it added 0.4.7 version)
    run: npm rebuild --runtime=electron --target=1.7.9 --disturl=https://atom.io/download/atom-shell --abi=57
    (1.7.9 is my electron --version and abi 57 is for my corresponding node --version 8.7)

// How to Run
- run: electron ./main.js
    (if couldn't run then try build steps one more time and then run)

// How to publish
By default, electron-updater will try to detect the GitHub settings (such as the repo name and owner) from reading the .git/config
Optional:
 {
     ...
     "build": {
         "publish": [{
             "provider": "github",
             "owner": "iffy",
             "repo": "electron-updater-example"
         }],
         ...
     }
 }

 1) get access token from https://github.com/settings/tokens/new and check "repo" section

 2) Windows: set it in terminal: [Environment]::SetEnvironmentVariable("GH_TOKEN","fs949jweksc6d3352fdb2ae4cdecf84jjfvw9vf","User")

 3) update the version in package.json and commit all changes

 4) run: node_modules/.bin/build --win -p always
    it'll create a new tag with current version and push the exe to the new DRAFT.

5) got to github repo-> releases and edit and "publish" this draft.

6) update should be avilable in user app. again repeat step 3, 4 and 5 for new release.


// to package app
// using electron builder
- install yarn from https://yarnpkg.com/en/docs/install
- run in vscode: yarn add electron-builder --dev
- configure package.json follow https://www.electron.build
- run: npx electron-builder
//artifactName String - The artifact file name template. Defaults to ${productName} Setup ${version}.${ext}
//can use glob ["**/*", "build/icon.*"]
 

"nsis": {
    "runAfterFinish": true,
    "installerIcon": "icon.ico",
    "uninstallerIcon": "icon.ico",
    "createDesktopShortcut": true,
    "deleteAppDataOnUninstall": true
  }


  // Handy NPM commands
- lists all installed packages:
npm list

- removes packages not depended on by your project according to your package.json:
npm prune

- tells you which installed packages are outdated with respect to what is current in the npm registry but allowable by the version definition in your package.json:
npm outdated (-g)

- Update all packages listed in package.json:
npm update

- Clean npm cache:
npm cache clean -f